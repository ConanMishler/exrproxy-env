{% for dex in dexs %}
####{{ dex.name.lower() }} STACK START
  xq-engine-{{ dex.name.lower() | replace('_','-') }}:
    image: blocknetdx/xq-engine:{{ xquery_tag }}
    depends_on:
      - "xq-graphql"
      - "xq-db"
    restart: unless-stopped
    environment:
      DEX: {{ dex.name }}
      XQ_NUM_WORKERS: {{ xq_num_workers }}
      API_URL: {{ dex.rpc_host }}
      DB_HOST: {{ postgres_ip }}
      DB_PORT: {{ postgres_port }}
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_DATABASE: postgres
      DB_SCHEMA: {{ dex.schema_name }}
      REDIS_HOST: {{ redis_ip }}
      REDIS_DATABASE: {{ dex.redis_db }}
      XQ_NUM_WORKERS: {{ xq_num_workers }}
      NUM_SAFETY_BLOCKS: {{ dex.num_safety_blocks }}
      TARGET_SLEEP_TIME: {{ dex.target_sleep_time }}
      ALEMBIC_SLEEP: {{ dex.alembic_sleep }} # Each xq-engine sleeps different time before running alembic - avoids db contention
      HASURA_IP: {{ hasura_ip }}
    volumes:
      - {{ xquery_volume }}/xquery/alembic:/app/xq-engine/alembic/versions
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "10"
    networks:
      backend:
        ipv4_address: {{ dex.ip }}
####{{ dex.name.lower() }} STACK END

{% endfor %}
  xq-db:
    image: postgres:15.0
    shm_size: 1g
    restart: unless-stopped
    volumes:
      - {{ xquery_volume }}/xquery/db:/var/lib/postgresql/data
    tty: true
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
    stop_signal: SIGINT
    stop_grace_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "10"
    networks:
      backend:
        ipv4_address: {{ postgres_ip }}

  xq-redis:
    image: redis:7.0
    restart: unless-stopped
    tty: true
    command: redis-server --save 20 1 --loglevel warning --requirepass "password"
    stop_signal: SIGINT
    stop_grace_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "10"
    networks:
      backend:
        ipv4_address: {{ redis_ip }}

  xq-graphql:
    image: hasura/graphql-engine:latest
    restart: unless-stopped
    tty: true
    # Uncomment the following 2 lines to expose hasura graphql on port 8080 of the host machine
    #ports:
    #  - "{{ hasura_port }}:{{ hasura_port }}"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:password@{{ postgres_ip }}:{{ postgres_port }}/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_SERVER_PORT: {{ hasura_port }}
    stop_signal: SIGINT
    stop_grace_period: 10s
    depends_on:
      - xq-db
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "10"
    networks:
      backend:
        ipv4_address: {{ hasura_ip }}
